#!/bin/bash

BASE=
UPSTREAM=
QUIET=0

while (( $# )) ; do
    case $1 in
        "-q")
            QUIET=1
            ;;
        *)
            if test -z "$BASE" ; then
                BASE="$1"
            elif test -z "$UPSTREAM" ; then
                UPSTREAM="$1"
            else
                echo "Too many arguments." >&2
                exit 1
            fi
            ;;
    esac
    shift
done

function usage {
    echo "usage: isff [-q] (UPSTREAM | BASE UPSTREAM)" >&2
}

function getbranch {
    BRANCH="$(git status -s -b | head -n 1)"
    if [ "$(echo "$BRANCH" | cut -d" " -f 2)" = "HEAD" ] ; then
        echo "HEAD is not currently a branch" >&2
        exit 1
    fi
    BRANCH="$(echo "$BRANCH" | cut -d" " -f 2-)"

    echo "$BRANCH" | cut -d "." --output-delimiter " " -f 1,4
}

if test -z "$BASE" ; then # infer branch and upstream with getbranch
    BRANCH="$(getbranch)"
    BASE="$(echo "$BRANCH" | cut -d " " -f 1)"
    UPSTREAM="$(echo "$BRANCH" | cut -d " " -f 2)"
elif test -z "$UPSTREAM" ; then # infer only current branch with getbranch
    BRANCH="$(getbranch)"
    UPSTREAM="$BASE" # the CLI parser puts the first arg in BASE
    BASE="$(echo "$BRANCH" | cut -d " " -f 1)"
fi

BASEREV="$(git rev-parse "$BASE")"
UPSTREAMREV="$(git rev-parse "$UPSTREAM")"
MERGEBASE="$(git merge-base "$BASE" "$UPSTREAM")"

test "$BASEREV" = "$UPSTREAMREV"
UPTODATE=$?

# note: if base is up to date with remote, then they are considered ff by this.
test "$(git merge-base "$BASE" "$UPSTREAM")" = "$BASEREV"
ISFF=$?

if [ $QUIET -eq 1 ] ; then
    exit $ISFF
elif (exit $UPTODATE) ; then
    echo "up to date"
else
    if (exit $STATUS) ; then
        echo "yes"
    else
        echo "no"
    fi
fi
